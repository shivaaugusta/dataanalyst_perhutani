# -*- coding: utf-8 -*-
"""biaya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GsWh76DnsxsprvSCz7QojGrHQIqSe3IL
"""

# 1. Install library (kalau belum ada)
!pip install pandas openpyxl

# 2. Import library
import pandas as pd

# 3. Load dataset (.xlsx)
file_path = '/content/dataset_bersih.xlsx'
df = pd.read_excel(file_path)

# 4. (Optional) lihat nama kolom
print(df.columns)

pip install streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# -------------------------------
# Title & Sidebar
# -------------------------------
st.set_page_config(page_title="Dashboard Aktiva", layout="wide")

st.title("📊 Dashboard Analisis Data Aktiva")
st.markdown("Unggah file Excel untuk melihat ringkasan, visualisasi, dan pencarian aset.")

# Sidebar
st.sidebar.header("⚙️ Pengaturan")
uploaded_file = st.sidebar.file_uploader("Upload File Excel", type=["xlsx"])

# -------------------------------
# Data Processing
# -------------------------------
if uploaded_file is not None:
    # Baca data
    df = pd.ExcelFile(uploaded_file).parse("Sheet1")

    # Bersihkan data
    df = df[~df["Jenis Aktiva"].isin(["Subtotal", "Total"])]
    df = df.dropna(how="all")
    df = df.fillna(0)

    # Pastikan kolom angka bertipe numerik
    num_cols = ["Perolehan", "Penyusutan", "Akumulasi", "Nilai Buku"]
    for col in num_cols:
        df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

    # -------------------------------
    # Sidebar Filter
    # -------------------------------
    golongan_list = df["Golongan"].unique().tolist()
    selected_golongan = st.sidebar.multiselect("Filter berdasarkan Golongan", golongan_list, default=golongan_list)

    df_filtered = df[df["Golongan"].isin(selected_golongan)]

    # -------------------------------
    # Ringkasan Metrik
    # -------------------------------
    st.subheader("📌 Ringkasan Data")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Total Perolehan", f"Rp {df_filtered['Perolehan'].sum():,.0f}")
    with col2:
        st.metric("Total Penyusutan", f"Rp {df_filtered['Penyusutan'].sum():,.0f}")
    with col3:
        st.metric("Total Akumulasi", f"Rp {df_filtered['Akumulasi'].sum():,.0f}")
    with col4:
        st.metric("Total Nilai Buku", f"Rp {df_filtered['Nilai Buku'].sum():,.0f}")

    st.markdown("---")

    # -------------------------------
    # Visualisasi
    # -------------------------------
    st.subheader("📈 Visualisasi Data")

    col5, col6 = st.columns(2)

    # Top 10 Jenis Aktiva berdasarkan Perolehan
    with col5:
        st.markdown("**Top 10 Jenis Aktiva berdasarkan Perolehan**")
        top10_jenis = df_filtered.groupby("Jenis Aktiva")["Perolehan"].sum().nlargest(10)
        fig1, ax1 = plt.subplots()
        top10_jenis.plot(kind="bar", ax=ax1)
        ax1.set_ylabel("Perolehan (Rp)")
        ax1.set_xlabel("Jenis Aktiva")
        ax1.tick_params(axis="x", rotation=45)
        st.pyplot(fig1)

    # Top 10 Golongan berdasarkan Penyusutan
    with col6:
        st.markdown("**Top 10 Golongan berdasarkan Penyusutan**")
        top10_golongan = df_filtered.groupby("Golongan")["Penyusutan"].sum().nlargest(10)
        fig2, ax2 = plt.subplots()
        top10_golongan.plot(kind="bar", ax=ax2, color="orange")
        ax2.set_ylabel("Penyusutan (Rp)")
        ax2.set_xlabel("Golongan")
        ax2.tick_params(axis="x", rotation=45)
        st.pyplot(fig2)

    # Histogram rasio penyusutan terhadap perolehan
    st.markdown("**Distribusi Rasio Penyusutan terhadap Perolehan**")
    df_filtered["Rasio Penyusutan"] = df_filtered["Penyusutan"] / df_filtered["Perolehan"]
    fig3, ax3 = plt.subplots()
    ax3.hist(df_filtered["Rasio Penyusutan"], bins=20, color="green", edgecolor="black")
    ax3.set_xlabel("Rasio Penyusutan")
    ax3.set_ylabel("Frekuensi")
    st.pyplot(fig3)

    # -------------------------------
    # Tabel Aset & Pencarian
    # -------------------------------
    st.subheader("🔎 Analisis Aset")

    # Top 10 Aset Perolehan
    st.markdown("**Top 10 Aset berdasarkan Perolehan**")
    st.dataframe(df_filtered.nlargest(10, "Perolehan")[["Jenis Aktiva", "Golongan", "Perolehan", "Nilai Buku"]])

    # Top 10 Aset Nilai Buku
    st.markdown("**Top 10 Aset berdasarkan Nilai Buku**")
    st.dataframe(df_filtered.nlargest(10, "Nilai Buku")[["Jenis Aktiva", "Golongan", "Perolehan", "Nilai Buku"]])

    # Search
    search_keyword = st.text_input("Cari Aset berdasarkan Nama / Jenis Aktiva:")
    if search_keyword:
        result = df_filtered[df_filtered["Jenis Aktiva"].str.contains(search_keyword, case=False, na=False)]
        st.write(f"Hasil pencarian untuk '{search_keyword}':")
        st.dataframe(result)

else:
    st.info("⬅️ Silakan upload file Excel dari sidebar untuk mulai analisis.")

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="Analisis Penyusutan Aset", layout="wide")

st.title("📊 Dashboard Analisis Biaya Penyusutan Aset")

# 1️⃣ Upload file
uploaded = st.file_uploader("dataset_bersih.xlsx", type=["xlsx"])

if uploaded:
    df = pd.read_excel(uploaded)

    # ---- 2. Clean Data ----
    # drop baris yang mengandung Subtotal / Total (di kolom object mana pun)
    obj_cols = df.select_dtypes(include='object').columns
    mask = df[obj_cols].apply(lambda x: x.str.contains('Subtotal|Total', case=False, na=False)).any(axis=1)
    df = df[~mask]

    # drop baris kosong
    df = df.dropna(how='all')

    # konversi Tahun_Perolehan
    if pd.api.types.is_datetime64_any_dtype(df['Tahun_Perolehan']):
        df['Tahun_Perolehan'] = df['Tahun_Perolehan'].dt.year

    # isi NaN
    df[obj_cols] = df[obj_cols].fillna('-')
    num_cols = df.select_dtypes(include=['float64','int64']).columns
    df[num_cols] = df[num_cols].fillna(0)
    df.reset_index(drop=True, inplace=True)

    st.subheader("Preview Dataset")
    st.dataframe(df.head())

    # ---- 3. Dashboard Ringkasan ----
    st.subheader("📌 Ringkasan Total")
    col1,col2,col3 = st.columns(3)
    col1.metric("Total Nilai Perolehan", f"{df['Nilai_Perolehan'].sum():,.0f} Rp")
    col2.metric("Total Biaya Penyusutan Bulan", f"{df['Biaya_Penyusutan_Bulan'].sum():,.0f} Rp")
    col3.metric("Total Akumulasi Penyusutan", f"{df['Akumulasi_Penyusutan'].sum():,.0f} Rp")

    # ---- 4. Top 10 Jenis Aktiva ----
    st.subheader("Top 10 Jenis Aktiva Penyumbang Biaya Penyusutan (Bulan)")
    biaya_per_jenis = (
        df.groupby('Jenis_Aktiva_Tetap')['Biaya_Penyusutan_Bulan']
        .sum()
        .sort_values(ascending=False)
    )
    top10_jenis = biaya_per_jenis.head(10)
    max_val = top10_jenis.max()
    divisor = 1e9 if max_val>=1e9 else 1e6
    satuan = "Miliar" if divisor==1e9 else "Juta"
    top10_jenis_scaled = top10_jenis / divisor

    fig1, ax1 = plt.subplots()
    top10_jenis_scaled.plot(kind='bar', ax=ax1)
    ax1.set_ylabel(f'Total Biaya Penyusutan ({satuan} Rp)')
    ax1.set_xlabel("Jenis Aktiva")
    plt.xticks(rotation=45, ha='right')
    st.pyplot(fig1)

    # ---- 5. Top 10 Golongan Penyusutan ----
    st.subheader("Top 10 Golongan Penyusutan berdasarkan Biaya Penyusutan")
    biaya_per_gol = df.groupby('Golongan_Penyusutan')['Biaya_Penyusutan_Bulan'].sum().sort_values(ascending=False)
    top10_gol = biaya_per_gol.head(10) / divisor

    fig2, ax2 = plt.subplots()
    top10_gol.plot(kind='bar', ax=ax2)
    ax2.set_ylabel(f'Total Biaya Penyusutan ({satuan} Rp)')
    ax2.set_xlabel("Golongan Penyusutan")
    plt.xticks(rotation=45, ha='right')
    st.pyplot(fig2)

    # ---- 6. Histogram Rasio Penyusutan ----
    st.subheader("Distribusi Rasio Penyusutan (Biaya Penyusutan / Nilai Buku)")
    # hitung kolom rasio (jika belum ada)
    if 'Rasio_Penyusutan' not in df.columns:
        df['Rasio_Penyusutan'] = df['Biaya_Penyusutan_Sampai_Bulan'] / df['Nilai_Buku_Bulan_Ini']
    rasio_positive = df[df['Rasio_Penyusutan'] > 0]['Rasio_Penyusutan']
    filtered_rasio = rasio_positive[rasio_positive < 20]

    fig3, ax3 = plt.subplots()
    ax3.hist(filtered_rasio, bins=30)
    ax3.set_xlabel("Rasio Penyusutan (<20)")
    ax3.set_ylabel("Jumlah Aset")
    st.pyplot(fig3)

    # ---- 7. Top Aset (Nilai Perolehan dan Nilai Buku) ----
    st.subheader("Top 10 Aset Berdasarkan Nilai Perolehan")
    top10_perol = df.sort_values('Nilai_Perolehan', ascending=False).head(10)
    st.table(top10_perol[['Jenis_Aktiva_Tetap','Nilai_Perolehan']])

    st.subheader("Top 10 Aset Berdasarkan Nilai Buku Bulan Ini")
    top10_book = df.sort_values('Nilai_Buku_Bulan_Ini', ascending=False).head(10)
    st.table(top10_book[['Jenis_Aktiva_Tetap','Nilai_Buku_Bulan_Ini']])

    # ---- 8. Pencarian Keyword (contoh kata "meja") ----
    st.subheader("🔎 Cari Aset berdasarkan Kata Kunci")
    keyword = st.text_input("Masukkan kata kunci (misal: meja, printer, ac, dll)", "")
    if keyword:
        mask = df['Jenis_Aktiva_Tetap'].str.contains(keyword, case=False, na=False)
        filtered = df[mask]
        st.write(f"Jumlah aset yang mengandung '{keyword}':  {len(filtered)}")
        st.write(f"Total nilai perolehan aset tersebut:  {filtered['Nilai_Perolehan'].sum():,.0f} Rp")
        st.dataframe(filtered[['Jenis_Aktiva_Tetap','Nilai_Perolehan','Biaya_Penyusutan_Bulan']])